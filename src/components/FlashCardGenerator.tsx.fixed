// filepath: c:\Users\A550191\git\ursa-minor-ascension\src\components\FlashCardGenerator.tsx
import { useCallback, useEffect, useState } from 'react';
import { useAzure } from '../context/AzureContext';
import { estimateFlashCardCount } from '../lib/flashcardService';
import type { FlashCardGenerationStatus, Series } from '../types/index';

interface FlashCardGeneratorProps {
    series: Series;
    status: FlashCardGenerationStatus;
    onStartGeneration: (count: number) => void;
    onCancel: () => void;
}

export function FlashCardGenerator({ series, status, onStartGeneration, onCancel }: FlashCardGeneratorProps) {
    const { endpoint, apiKey } = useAzure();
    const [cardCount, setCardCount] = useState(10);
    const [estimatedCount, setEstimatedCount] = useState<number | null>(null);
    const [isEstimating, setIsEstimating] = useState(false);

    // Debug config availability
    useEffect(() => {
        console.log('FlashCardGenerator: Azure config available:', !!(endpoint && apiKey));
        console.log('FlashCardGenerator: Series:', series?.id, 'with', series?.pages?.length, 'pages');
    }, [endpoint, apiKey, series]);
    
    // Estimate card count on initial load
    useEffect(() => {
        let isMounted = true;
        let timeoutId: number | undefined;

        async function runEstimation() {
            if (!endpoint || !apiKey || isEstimating) return;

            setIsEstimating(true);

            try {
                // Calculate default count based on pages - this is guaranteed to work
                const defaultCount = Math.min(Math.max(series.pages.length * 3, 5), 50);
                
                // Create a timeout to prevent UI from being stuck in estimating state
                timeoutId = window.setTimeout(() => {
                    console.log('Estimation timed out after 8 seconds, using default count:', defaultCount);
                    if (isMounted) {
                        setEstimatedCount(defaultCount);
                        setCardCount(defaultCount);
                        setIsEstimating(false);
                    }
                }, 8000); // 8-second timeout
                
                // Try to estimate based on content, with a catch for any errors
                try {
                    const azureConfig = { endpoint, apiKey };
                    // Use Promise.race to implement a timeout
                    const count = await Promise.race([
                        estimateFlashCardCount(series, azureConfig),
                        // Secondary timeout as a backup
                        new Promise<number>((resolve) => {
                            setTimeout(() => resolve(defaultCount), 7500);
                        })
                    ]);
                    
                    // Only update if still mounted
                    if (isMounted) {
                        console.log('Estimation completed with count:', count);
                        setEstimatedCount(count);
                        setCardCount(count);
                    }
                } catch (error) {
                    console.error('Error estimating flash card count:', error);
                    // Use default values if estimation fails
                    if (isMounted) {
                        setEstimatedCount(defaultCount);
                        setCardCount(defaultCount);
                    }
                }
            } finally {
                // Clear timeout in case of early completion or error
                window.clearTimeout(timeoutId);
                // Only update if still mounted
                if (isMounted) {
                    setIsEstimating(false);
                }
            }
        }

        runEstimation();

        return () => {
            isMounted = false;
            if (timeoutId) window.clearTimeout(timeoutId);
        };
    }, [endpoint, apiKey, series]);

    // Handle form submission
    const handleSubmit = useCallback((e: React.FormEvent) => {
        e.preventDefault();
        console.log('Form submitted, generating', cardCount, 'flash cards');
        onStartGeneration(cardCount);
    }, [cardCount, onStartGeneration]);

    // Render loading state
    if (status.status === 'generating' || status.status === 'estimating') {
        return (
            <div className="bg-white rounded-lg shadow-md p-6">
                <h3 className="text-xl font-semibold mb-4">Generating Flash Cards</h3>

                <div className="mb-4">
                    <div className="w-full bg-gray-200 rounded-full h-2.5">
                        <div
                            className="bg-blue-500 h-2.5 rounded-full"
                            style={{
                                width: status.progress && status.total
                                    ? `${Math.min(100, (status.progress / status.total) * 100)}%`
                                    : '0%'
                            }}
                        ></div>
                    </div>

                    <p className="text-sm text-gray-600 mt-2">
                        {status.progress !== undefined && status.total !== undefined
                            ? `Processing ${status.progress} of ${status.total} chunks...`
                            : 'Processing...'}
                    </p>
                </div>

                <button
                    onClick={onCancel}
                    className="py-2 px-4 border border-gray-300 rounded-md"
                >
                    Cancel
                </button>
            </div>
        );
    }

    // Render error state
    if (status.status === 'error') {
        return (
            <div className="bg-white rounded-lg shadow-md p-6">
                <h3 className="text-xl font-semibold mb-4">Error Generating Flash Cards</h3>
                <p className="text-red-500 mb-4">{status.error || 'An unknown error occurred'}</p>

                <button
                    onClick={() => onStartGeneration(cardCount)}
                    className="py-2 px-4 bg-blue-500 text-white rounded-md"
                >
                    Try Again
                </button>
            </div>
        );
    }

    // Render generator form
    return (
        <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-xl font-semibold mb-4">Generate Flash Cards</h3>
            <p className="text-gray-600 mb-6">
                Create flash cards based on your captured content. The AI will analyze your pages and generate question-answer pairs.
            </p>

            <form onSubmit={handleSubmit}>
                <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        Number of Flash Cards to Generate
                    </label>

                    {isEstimating ? (
                        <div className="flex items-center">
                            <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-blue-500 mr-2"></div>
                            <span className="text-sm text-gray-500">Estimating optimal number...</span>
                        </div>
                    ) : estimatedCount ? (
                        <div className="mb-2 text-sm text-gray-500">
                            Recommended: {estimatedCount} cards based on your content
                        </div>
                    ) : null}

                    <div className="flex items-center">
                        <input
                            type="range"
                            min="5"
                            max="50"
                            step="1"
                            value={cardCount}
                            onChange={(e) => setCardCount(parseInt(e.target.value))}
                            className="w-full mr-3"
                        />
                        <span className="text-gray-700 font-medium">{cardCount}</span>
                    </div>
                </div>

                <div className="flex flex-wrap gap-2">
                    <button
                        type="submit"
                        className="flex-1 py-2 px-4 bg-blue-500 text-white rounded-md"
                    >
                        Generate Flash Cards
                    </button>
                </div>
            </form>
        </div>
    );
}
